/// \file
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/

module Nirvana {

native Pointer;
native ConstPointer;
native Size;
native PtrDiff;

};

module PortableServer {

native Servant;

};

module CORBA {

native LocalObject;

module Internal {

typeprefix CORBA::Internal "";

/// ObjectFactory Interface to the core object functionality.
pseudo interface ObjectFactory
{
	/// \brief Allocates memory for servant.
	///
	/// If we currently run out of SD, this operation creates a new
	/// SD and enters into it. Then it allocates memory from the current SD heap.
	/// This operation is not called for stateless servants.
	///
	/// \param size Amount of memory in bytes.
	/// \returns The allocated memory pointer.
	Nirvana::Pointer memory_allocate (in Nirvana::Size size);

	/// \brief Releases servant memory.
	///
	/// This method detects when memory is stateless and releases it properly.
	/// \param p Servant memory.
	/// \param size Amount of memory in bytes.
	void memory_release (in Nirvana::Pointer p, in Nirvana::Size size);

	/// \brief Create core ServantBase object.
	/// 
	/// \param impl The servant ServantBase implementation pointer.
	/// 
	/// \returns The core ServantBase reference.
	PortableServer::Servant create_servant (in PortableServer::Servant impl);

	/// \brief Create core LocalObject object.
	/// 
	/// \param impl The servant LocalObject implementation pointer.
	/// 
	/// \returns The core LocalObject reference.
	LocalObject create_local_object (in LocalObject impl);

	/// \brief Stateless servant creation frame.
	struct StatelessCreationFrame
	{
		Nirvana::ConstPointer tmp; ///< Pointer to the temporary object storage in stack.
		Nirvana::Size size; ///< Size of the object.
		Nirvana::PtrDiff offset; ///< Used internally.
		Nirvana::Pointer next;
	};

	/// \brief Start creation of a stateless servant.
	/// 
	/// \param scf Stateless servant creation frame.
	/// 
	/// \throws BAD_OPERATION if stateless creation is not available.
	void stateless_begin (inout StatelessCreationFrame scf);

	/// \brief Finish creation of stateless servant.
	/// 
	/// \param success `true` if temporary object successfully constructed.
	///   If the object constructor failed, stateless_end must be called with `false`
	///   for the frame cleanup.
	/// 
	/// \returns Pointer to stateless object created.
	Nirvana::Pointer stateless_end (in boolean success);

	/// \brief Copy memory block to stateless heap.
	/// 
	/// May be used in complex stateless servant implementation.
	/// 
	/// \param src  Memory block pointer.
	/// \param size Memory block size.
	/// 
	/// \returns Pointer to the read-only memory block in the stateless heap.
	///   The caller is responsible for releasing this block by memory_release call.
	Nirvana::ConstPointer stateless_copy (in Nirvana::ConstPointer src, in Nirvana::Size size);

	/// \brief `true` if current sync context is free.
	///
	/// If a programmer wants to create stateless sync free servant,
	/// he has to call make_stateless from the free sync context.
	/// This attribute is intended for debugging purposes to let
	/// a programmer be ensure that the sync context is free.
	readonly attribute boolean is_free_sync_context;
};

};
};
