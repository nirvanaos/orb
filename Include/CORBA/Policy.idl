/// \file
/// Policy
/// CORBA 3.0, Chapter 4
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/

#include "Current.idl"

module CORBA {

typeprefix CORBA "omg.org";

typedef unsigned long PolicyType;

// Basic IDL definition
interface Policy
{
  readonly attribute PolicyType policy_type;
  Policy copy ();
  void destroy ();
};

typedef sequence <Policy> PolicyList;
typedef sequence <PolicyType> PolicyTypeSeq;

typedef short PolicyErrorCode;

exception PolicyError
{
  PolicyErrorCode reason;
};

const PolicyErrorCode BAD_POLICY = 0;
const PolicyErrorCode UNSUPPORTED_POLICY = 1;
const PolicyErrorCode BAD_POLICY_TYPE = 2;
const PolicyErrorCode BAD_POLICY_VALUE = 3;
const PolicyErrorCode UNSUPPORTED_POLICY_VALUE = 4;

enum SetOverrideType
{
  SET_OVERRIDE,
  ADD_OVERRIDE
};

exception InvalidPolicies
{
  sequence <unsigned short> indicies;
};

interface PolicyManager
{
  PolicyList get_policy_overrides (in PolicyTypeSeq ts);

  void set_policy_overrides (in PolicyList policies,
    in SetOverrideType set_add)
    raises (InvalidPolicies);
};

local interface PolicyCurrent : PolicyManager, Current
{};

};
