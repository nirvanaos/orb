/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/

module CORBA {
module Internal {

native NativeFloat;
native NativeDouble;
native NativeLongDouble;

native FloatIEEE4;
native FloatIEEE8;
native FloatIEEE16;

// SoftFloat exception flags.
typedef unsigned short SFloatExc;

pseudo interface SFloat4
{
	typedef FloatIEEE4 FloatIEEE;

	SFloatExc from_float (in NativeFloat x, out FloatIEEE f);
	SFloatExc from_long (in long x, out FloatIEEE f);
	SFloatExc from_unsigned_long (in unsigned long x, out FloatIEEE f);
	SFloatExc from_long_long (in long long x, out FloatIEEE f);
	SFloatExc from_unsigned_long_long (in unsigned long long x, out FloatIEEE f);

	SFloatExc to_float (in FloatIEEE f, out NativeFloat x);
	SFloatExc to_long (in FloatIEEE f, out long x);
	SFloatExc to_long_long (in FloatIEEE f, out long long x);

	SFloatExc add (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc sub (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc mul (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc div (inout FloatIEEE x, in FloatIEEE y);

	SFloatExc eq (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc le (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc lt (in FloatIEEE x, in FloatIEEE y, out boolean res);
};

pseudo interface SFloat8
{
	typedef FloatIEEE8 FloatIEEE;

	SFloatExc from_double (in NativeDouble x, out FloatIEEE f);
	SFloatExc from_long (in long x, out FloatIEEE f);
	SFloatExc from_unsigned_long (in unsigned long x, out FloatIEEE f);
	SFloatExc from_long_long (in long long x, out FloatIEEE f);
	SFloatExc from_unsigned_long_long (in unsigned long long x, out FloatIEEE f);

	SFloatExc to_double (in FloatIEEE f, out NativeDouble x);
	SFloatExc to_long (in FloatIEEE f, out long x);
	SFloatExc to_long_long (in FloatIEEE f, out long long x);

	SFloatExc add (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc sub (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc mul (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc div (inout FloatIEEE x, in FloatIEEE y);

	SFloatExc eq (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc le (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc lt (in FloatIEEE x, in FloatIEEE y, out boolean res);
};

pseudo interface SFloat16
{
	typedef FloatIEEE16 FloatIEEE;

	SFloatExc from_double (in NativeDouble x, out FloatIEEE f);
	SFloatExc from_long_double (in NativeLongDouble x, out FloatIEEE f);
	SFloatExc from_long (in long x, out FloatIEEE f);
	SFloatExc from_unsigned_long (in unsigned long x, out FloatIEEE f);
	SFloatExc from_long_long (in long long x, out FloatIEEE f);
	SFloatExc from_unsigned_long_long (in unsigned long long x, out FloatIEEE f);

	SFloatExc to_double (in FloatIEEE f, out NativeDouble x);
	SFloatExc to_long_double (in FloatIEEE f, out NativeLongDouble x);
	SFloatExc to_long (in FloatIEEE f, out long x);
	SFloatExc to_long_long (in FloatIEEE f, out long long x);

	SFloatExc add (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc sub (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc mul (inout FloatIEEE x, in FloatIEEE y);
	SFloatExc div (inout FloatIEEE x, in FloatIEEE y);

	SFloatExc eq (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc le (in FloatIEEE x, in FloatIEEE y, out boolean res);
	SFloatExc lt (in FloatIEEE x, in FloatIEEE y, out boolean res);
};

const SFloat4 sfloat_4;
const SFloat8 sfloat_8;
const SFloat16 sfloat_16;

};
};
