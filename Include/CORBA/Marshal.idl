/// \file
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#include "MarshalContext.idl"

module CORBA {
module Nirvana {

/// Marshals data between objects in the same platform domain.
pseudo interface Marshal
{
  /// Returns marshal context.
  /// Used for proxy code optimization.
  readonly attribute MarshalContext marshal_context;

  /// \brief Marshals memory block to the target memory space.
  ///
  /// \param          p    A memory block.
  /// \param [in,out] size The size of memory block.
  ///                      On return, contains the size of memory block allocated in the target memory space.
  ///                      If size = 0 on return, the memory block is owned by the marshaling system
  ///                      and mustn't be released.
  ///                      If size if not zero, the memory block may be adopted by the message recipient
  ///                      on the other side by `Unmarshal::adopt_memory()` call.
  /// \param release_size  If != 0 then source memory block at address p with size release_size must be released
  ///                      after marshaling.
  /// \return Address of the memory block at target memory space.
  ::Nirvana::UIntPtr marshal_memory (in ::Nirvana::ConstPointer p, inout ::Nirvana::Size size, in ::Nirvana::Size release_size);

  /// \brief Allocates the uninitialized memory block and map it to the target memory space.
  ///        The caller gets pointer to the block and fill it with data.
  ///
  /// \param [in,out] size    The size of the memory block. See the `marshal_memory`.
  /// \param [out]    buf_ptr The buffer pointer in current memory space.
  ///
  /// \return Address of the memory block at target memory space.
  ::Nirvana::UIntPtr get_buffer (inout ::Nirvana::Size size, out ::Nirvana::Pointer buf_ptr);

  /// \brief Marshal interface.
  /// 
  /// \param obj The interface.
  ::Nirvana::UIntPtr marshal_interface (in Interface obj);
};

};
};
