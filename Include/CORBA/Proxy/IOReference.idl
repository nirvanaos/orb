/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#include "../IORequest.idl"

module Messaging {

typeprefix Messaging "omg.org";
abstract valuetype Poller;

};

module CORBA {
module Internal {

native InterfacePtr;

/// Request callback
pseudo interface RequestCallback
{
	/// Called on request completion
	void completed (in IORequest rq);
};

/// Interoperable Object Reference.
/// 
/// Interface to the implementation of the some Inter-ORB protocol.
pseudo interface IOReference
{
	/// Operation index
	struct OperationIndex
	{
		/// Index of interface
		unsigned short interface_idx;

		/// Index of operation within the interface
		unsigned short operation_idx;
	};

	/// \brief Create request.
	/// 
	/// Implementation note: this operation may not cause the preemption.
	/// 
	/// flags & IORequest::RESPONSE_EXPECTED | callback | Request type
	/// -------------------------------------|----------|-------------
	/// true                                 | nil      | Synchronous
	/// true                                 | not nil  | Asynchronous
	/// false                                | nil      | Oneway
	/// false                                | not nil  | N/A
	/// 
	/// \param op Index of the operation.
	/// \param flags The combination of the IORequest response flags.
	/// \param cb Asynchronous request callback.
	IORequest create_request (in OperationIndex op, in unsigned short flags, in RequestCallback callback);

	Messaging::Poller create_poller (in OperationIndex op);
};

};
};
