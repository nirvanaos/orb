/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#include "../IORequest.idl"

module CORBA {
module Internal {

native InterfacePtr;

/// /// Interoperable Object Reference.
/// 
/// Interface to the implementation of the some Inter-ORB protocol.
pseudo interface IOReference
{
	/// Returns Object reference.
	InterfacePtr get_object (in string id);

	/// Operation index
	struct OperationIndex
	{
		/// Index of interface
		unsigned short interface_idx;

		/// Index of operation within the interface
		unsigned short operation_idx;
	};

	/// Create request.
	IORequest create_request (in OperationIndex op);

	/// Create oneway request.
	IORequest create_oneway (in OperationIndex op);

	typedef unsigned long long DeadlineTime;

	/// Send request asynchronously.
	/// 
	/// \param request  The request created by create_oneway() or create_async().
	///                 For the oneway request callee clears request reference.
	/// \param deadline Asynchronous request deadline.
	void send (inout IORequest request, in DeadlineTime deadline);

};

};
};
