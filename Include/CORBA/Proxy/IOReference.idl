/*
* Nirvana runtime library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
module Nirvana{

native Pointer;
native ConstPointer;
native Size;

};

module CORBA {
module Nirvana {

/// Low 16 bits contain the interface index.
/// High 16 bits contain the operation index within the interface.
typedef unsigned long OperationIndex;

interface Marshal;
interface Unmarshal;

/// \brief Interoperable Object Reference.
///        Interface to the implementation of the some Inter-ORB protocol.
abstract valuetype IOReference
{
	/// Returns Object reference.
	readonly attribute Object object;

	/// Creates Marshal object.
	Marshal create_marshaler ();

	/// Performs a synchronous call.
	/// \param op                Operation index.
	/// \param in_params         Input parameters block's pointer.
	///                          Contains input values for in and inout parameters.
	///                          May be `nil` if there aren't in and inout parameters.
	/// \param in_params_size    Size of the input parameters block.
	/// \param marshaler         `Marshal` object. May be `nil` on input. Always `nil` on output.
	/// \param out_params        Pointer to a memory buffer for output parameters.
	/// \param out_params_size   Size of the output parameters block.
	/// \returns                 `Unmarshal` object for returned data. May be `nil`.
	Unmarshal call (in OperationIndex op,
		in ::Nirvana::ConstPointer in_params, in ::Nirvana::Size in_params_size, inout Marshal marshaler,
		in ::Nirvana::Pointer out_params, in ::Nirvana::Size out_params_size) raises (UnknownUserException);

	/// Performs an asynchronous call.
	/// \param op              Operation index.
	/// \param in_params       Input parameters block's pointer.
	///                        Contains input values for in and inout parameters.
	///                        May be nil if there aren't in and inout parameters.
	/// \param in_params_size  Size of the input parameters block.
	/// \param marshaler       Marshal object. May be nil.
	/// \param out_params_size Size of the output parameters block.
	/// \param _oneway         TRUE if this is oneway operation.
	/// \returns               AsyncCall object. Nil if _oneway is TRUE.
	
	/* TODO: Not yet implemented
	AsyncCall async_call (OperationIndex op,
		::Nirvana::ConstPointer in_params, ::Nirvana::Size in_params_size, Marshal marshaler,
		::Nirvana::Size out_params_size, boolean _oneway);
		*/
};

};
};
