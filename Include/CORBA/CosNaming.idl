// File: CosNaming.idl
#ifndef COSNAMING_IDL_
#define COSNAMING_IDL_

#pragma prefix "omg.org"

module CosNaming {

typedef string Istring;

struct NameComponent {
	Istring id;
	Istring kind;
};

typedef sequence <NameComponent> Name;

enum BindingType { nobject, ncontext };

struct Binding
{
	Name        binding_name;
	BindingType binding_type;
};

// Note: In struct Binding, binding_name is incorrectly defined
// as a Name instead of a NameComponent. This definition is
// unchanged for compatibility reasons.
typedef sequence <Binding> BindingList;

interface BindingIterator;

interface NamingContext
{
	enum NotFoundReason { missing_node, not_context, not_object };

	exception NotFound
	{
		NotFoundReason why;
		Name rest_of_name;
	};

	exception CannotProceed {
		NamingContext cxt;
		Name rest_of_name;
	};

	exception InvalidName {};

	exception AlreadyBound {};

	exception NotEmpty {};

	void bind (in Name n, in Object obj)
		raises (
			NotFound, CannotProceed, InvalidName, AlreadyBound
		);

	void rebind (in Name n, in Object obj)
		raises (NotFound, CannotProceed, InvalidName);

	void bind_context (in Name n, in NamingContext nc)
		raises (NotFound, CannotProceed, InvalidName, AlreadyBound);

	void rebind_context (in Name n, in NamingContext nc)
		raises (NotFound, CannotProceed, InvalidName);

	Object resolve (in Name n)
		raises (NotFound, CannotProceed, InvalidName);

	void unbind (in Name n)
		raises (NotFound, CannotProceed, InvalidName);

	NamingContext new_context ();

	NamingContext bind_new_context (in Name n)
		raises (
			NotFound, AlreadyBound,
			CannotProceed, InvalidName
		);

	void destroy () raises (NotEmpty);

	/// The list operation allows a client to iterate through a set of bindings in a naming context.
	/// 
	/// \param how_many The \p how_many parameter determines the maximum number of bindings to return
	///   in the parameter \p bl, with any remaining bindings to be accessed through the returned
	///   BindingIterator \p bi.
	/// 
	///   A non-zero value of \p how_many guarantees that \p bl contains at most \p how_many elements.
	///   The implementation is free to return fewer than the number of bindings requested by how_many.
	///   However, for a non-zero value of how_many, it may not return a \p bl sequence with zero
	///   elements unless the context contains no bindings.
	/// 
	///   If \p how_many is set to zero, the client is requesting to use only the BindingIterator \p bi
	///   to access the bindings and list returns a zero length sequence in \p bl.
	/// 
	/// \param bl The \p bl parameter is a sequence where each element is a Binding containing a Name
	///   of length 1 representing a single NameComponent.
	/// 
	/// \param bi The parameter \p bi returns a reference to an iterator object.
	/// 
	///   If the \p bi parameter returns a non-nil reference, this indicates that the call to list() may not
	///   have returned all of the bindings in the context and that the remaining bindings (if any) must be
	///   retrieved using the iterator. This applies for all values of \p how_many.
	/// 
	void list (
		in unsigned long how_many,
		out BindingList bl,
		out BindingIterator bi
	);

};

interface BindingIterator {
	boolean next_one (out Binding b);
	boolean next_n (in unsigned long how_many, out BindingList bl);
	void destroy ();
};

interface NamingContextExt : NamingContext {
	typedef string StringName;
	typedef string Address;
	typedef string URLString;

	StringName to_string (in Name n) raises (InvalidName);
	Name to_name (in StringName sn) raises (InvalidName);

	exception InvalidAddress {};

	URLString to_url (in Address addr, in StringName sn) raises (InvalidAddress, InvalidName);

	Object resolve_str (in StringName sn)
		raises (
			NotFound, CannotProceed,
			InvalidName
		);
};

};

#endif // COSNAMING_IDL_
