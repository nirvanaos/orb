/// \file
/*
* Nirvana IDL support library.
*
* This is a part of the Nirvana project.
*
* Author: Igor Popov
*
* Copyright (c) 2021 Igor Popov.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*
* Send comments and/or bug reports to:
*  popov.nirvana@gmail.com
*/
#include "TypeCode.idl"

module CORBA {
module Internal {

native Interface;
native CharPtr;
native ConstCharPtr;
native WCharPtr;
native ConstWCharPtr;

/// Interoperable Object Request.
/// 
/// Interface to the implementation of the some Inter-ORB protocol.
pseudo interface IORequest
{
  ///@{
  /// Marshal/unmarshal data that meet the common data representation.

  /// Marshal CDR data.
  /// 
  /// \param align Data alignment
  /// \param size  Data size.
  /// \param data  Pointer to the data with common-data-representation (CDR).
  void marshal (in Nirvana::Size align, in Nirvana::Size size,
    in Nirvana::ConstPointer data);

  /// Unmarshal CDR data.
  /// 
  /// \param align Data alignment
  /// \param size  Data size.
  /// \param [out] data Pointer to the internal data buffer.
  /// \returns `true` if the byte order must be swapped after unmarshaling.
  boolean unmarshal (in Nirvana::Size align, in Nirvana::Size size,
    out Nirvana::Pointer data);

  /// Marshal CDR sequence.
  /// 
  /// \param align Data alignment
  /// \param element_size Element size.
  /// \param element_count Count of elements.
  /// \param data Pointer to the data with common-data-representation (CDR).
  /// \param allocated_size If this parameter is not zero, the request
  ///        object becomes an owner of the memory block.
  void marshal_seq (in Nirvana::Size align, in Nirvana::Size element_size,
    in Nirvana::Size element_count, in Nirvana::Pointer data,
    in Nirvana::Size allocated_size);

  /// Unmarshal CDR sequence.
  /// 
  /// \param align Data alignment
  /// \param element_size Element size.
  /// \param [out] element_count Count of elements.
  /// \param [out] data Pointer to the allocated memory block with common-data-representation (CDR).
  ///                   The caller becomes an owner of this memory block.
  /// \param [out] allocated_size Size of the allocated memory block.
  ///              
  /// \returns `true` if the byte order must be swapped after unmarshaling.
  boolean unmarshal_seq (in Nirvana::Size align, in Nirvana::Size element_size,
    out Nirvana::Size element_count, out Nirvana::Pointer data,
    out Nirvana::Size allocated_size);

  ///@}

  ///@{
  /// Marshal/unmarshal sequences.

  /// Write marshaling sequence size.
  /// 
  /// \param element_count The sequence size.
  void marshal_seq_begin (in Nirvana::Size element_count);

  /// Get unmarshalling sequence size.
  /// 
  /// \returns The sequence size.
  Nirvana::Size unmarshal_seq_begin ();

  ///@}

  ///@{
  /// Marshal/unmarshal character data.

  void marshal_char (in Nirvana::Size count, in ConstCharPtr data);
  void unmarshal_char (in Nirvana::Size count, in CharPtr data);

  void marshal_string (inout string s, in boolean move);
  void unmarshal_string (out string s);

  typedef sequence <char> CharSeq;
  void marshal_char_seq (inout CharSeq s, in boolean move);
  void unmarshal_char_seq (out CharSeq s);

  void marshal_wchar (in Nirvana::Size count, in ConstWCharPtr data);
  void unmarshal_wchar (in Nirvana::Size count, in WCharPtr data);

  void marshal_wstring (inout wstring s, in boolean move);
  void unmarshal_wstring (out wstring s);

  typedef sequence <wchar> WCharSeq;
  void marshal_wchar_seq (inout WCharSeq s, in boolean move);
  void unmarshal_wchar_seq (out WCharSeq s);

  ///@}

  ///@{
  /// Object operations.

  /// Marshal interface.
  /// 
  /// \param itf The interface derived from Object or LocalObject.
  void marshal_interface (in Interface itf);

  /// Unmarshal interface.
  /// 
  /// \param rep_id The interface repository id.
  /// 
  /// \returns Interface.
  Interface unmarshal_interface (in string interface_id);

  /// Marshal TypeCode.
  /// 
  /// \param tc TypeCode.
  void marshal_type_code (in TypeCode tc);

  /// Unmarshal TypeCode.
  /// 
  /// \returns TypeCode.
  TypeCode unmarshal_type_code ();

  /// Marshal value type.
  /// 
  /// \param val    ValueBase.
  /// \param output Output parameter marshaling. Haven't to perform deep copy.
  void marshal_value (in Interface val, in boolean output);

  /// Unmarshal value type.
  /// 
  /// \param rep_id The value type repository id.
  /// 
  /// \returns Value type interface.
  Interface unmarshal_value (in string interface_id);

  /// Marshal abstract interface.
  /// 
  /// \param itf The interface derived from AbstractBase.
  /// \param output Output parameter marshaling. Haven't to perform deep copy.
  void marshal_abstract (in Interface itf, in boolean output);

  /// Unmarshal abstract interface.
  /// 
  /// \param rep_id The interface repository id.
  /// 
  /// \returns Interface.
  Interface unmarshal_abstract (in string interface_id);

  ///@}

  ///@{
  /// Callee operations.

  /// End of input data marshaling.
  /// 
  /// Marshaling resources may be released.
  /// This operation is called only if the input data is not empty.
  void unmarshal_end ();

  /// Return exception to caller.
  /// Operation has move semantics so `e` may be cleared.
  void set_exception (inout any e);

  /// Marks request as successful.
  void success ();

  ///@}

  ///@{
  /// Caller operations.

  /// Invoke request.
  void invoke ();

  void wait ();

  readonly attribute boolean completed;
  readonly attribute boolean is_exception;

  ///@}
};

};
};
