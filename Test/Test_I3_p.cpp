// This file will be generated by the IDL compiler in the future.
#include "Test_I3_s.h"
#include "Test_I1.h"
#include "Test_I2.h"
#include <CORBA/Proxy/Proxy.h>

namespace CORBA {
namespace Nirvana {

IMPLEMENT_PROXY_FACTORY (::Test, I3);

template <>
struct ProxyTraits <::Test::I3>
{
	static const Operation operations_ [];
	static const Char* const interfaces_ [];

	// long op3 (long p1);

	typedef Long op3_in;
	typedef Long op3_out;
	static const Parameter op3_in_params_ [1];

	static void op3_request (::Test::I3_ptr _servant,
		IORequest_ptr _call,
		::Nirvana::ConstPointer _in_params,
		Unmarshal_var _u,
		::Nirvana::Pointer _out_params)
	{
		const op3_in& _in = *(const op3_in*)_in_params;
		op3_out& _out = *(op3_out*)_out_params;
		_out = _servant->op3 (_in);
	}
};

template <>
class Proxy <::Test::I3> :
	public ProxyBase <::Test::I3>,
	public ProxyBaseInterface <::Test::I2>,
	public ProxyBaseInterface <::Test::I1>
{
	typedef ProxyBase <::Test::I3> Base;
	typedef ProxyTraits <::Test::I3> Traits;
public:
	Proxy (IOReference_ptr proxy_manager, CORBA::UShort interface_idx) :
		Base (proxy_manager, interface_idx)
	{
		AbstractBase_ptr ab = Object_ptr (proxy_manager);
		ProxyBaseInterface <::Test::I2>::init (ab);
		ProxyBaseInterface <::Test::I1>::init (ab);
	}

	Long op3 (Long p1) const
	{
		Traits::op3_out _out;
		Marshal_var _m;
		_target ()->call (CORBA::Nirvana::OperationIndex{ _interface_idx (), 0 },
			&p1, sizeof (p1), _m, &_out, sizeof (_out));
		return _out;
	}
};

const Parameter ProxyTraits <::Test::I3>::op3_in_params_ [1] = {
	{ "p1", ::CORBA::_tc_long }
};

const Operation ProxyTraits <::Test::I3>::operations_ [] = {
	{ "op3", { op3_in_params_, countof (op3_in_params_) }, {0, 0}, ::CORBA::_tc_long, RqProcWrapper <::Test::I3, op3_request> }
};

const Char* const ProxyTraits <::Test::I3>::interfaces_ [] = {
	::Test::I3::repository_id_,
	::Test::I2::repository_id_,
	::Test::I1::repository_id_
};

template <>
const InterfaceMetadata ProxyFactoryImpl <::Test::I3>::metadata_ = {
	{ProxyTraits <::Test::I3>::interfaces_, countof (ProxyTraits <::Test::I3>::interfaces_)},
	{ProxyTraits <::Test::I3>::operations_, countof (ProxyTraits <::Test::I3>::operations_)}
};

}
}

namespace Test {
typedef ::CORBA::Nirvana::ProxyFactoryImpl <I3> _I3_ProxyFactory;
}

NIRVANA_EXPORT_INTERFACE1 (Test, Test::I3::repository_id_, _I3_ProxyFactory, CORBA::AbstractBase);
